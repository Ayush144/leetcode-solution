Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

 

Example 1:

Input: s = "cbaebabacd", p = "abc"
Output: [0,6]
Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input: s = "abab", p = "ab"
Output: [0,1,2]
Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".
 

Constraints:

1 <= s.length, p.length <= 3 * 104
s and p consist of lowercase English letters.


====================================================================================================================================================================
JAVA SOLUTION

class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        List<Integer> res = new ArrayList<>();
        if(s.length() < p.length()) return res;
     char[] sarray = s.toCharArray();
     char[] parray=p.toCharArray();
        int count1[]= new int[26];
        int count2[] =new int[26];
        for(int i=0;i<parray.length;i++){
            count1[parray[i] -'a']++;
            count2[sarray[i]-'a']++;
        }
        for(int i=0;i<sarray.length-parray.length+1;i++){
            if(Arrays.equals(count1,count2)){
                res.add(i);
                
            }
            if(i==sarray.length-parray.length){
                break;
            }
            count2[s.charAt(i)-'a']--;
            count2[s.charAt(i+p.length())-'a']++;
        }
        return res;
        
    }
}
